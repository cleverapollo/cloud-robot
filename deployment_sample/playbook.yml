---
- hosts: "{{ deployment_host }}"
  remote_user: administrator
  become: yes
  tasks:

    - name: Check for presence of Docker
      shell: "docker --version"
      register: docker_presence
      ignore_errors: yes

    - name: Ensure Docker is installed
      shell: "curl -sSL https://get.docker.com/ | sh"
      args:
        warn: no
      when: docker_presence.rc != 0

    - name: Ensure pip3 is installed
      apt:
        update_cache: yes
        name: python3-pip

    - name: Ensure docker is installed so ansible can control docker
      pip:
        name: docker

    - name: Login to the Docker registry
      docker_login:
        registry: ### Repository Registry e.g. github.com ###
        username: ### Repository Username ###
        password: ### Repository Password ###

    - name: Delete previous images
      shell: "docker rmi $(docker images -q)"
      ignore_errors: yes

    - name: Deploy Jaeger Agent for reporting Spans to Jaeger
      docker_container:
        name: "jaeger-agent"
        image: ### Image: https://hub.docker.com/r/jaegertracing/jaeger-agent  Version: jaegertracing/jaeger-agent:1.10.1 ###
        pull: true
        state: started
        restart_policy: "unless-stopped"
        network_mode: host
        env:
          COLLECTOR_HOST_PORT: ### LOGSTASH_URL:14267 e.g. logstash.com:14267' ###

    - name: Deploy flower for monitoring Celery
      docker_container:
        name: "flower"
        image: ### Image: https://hub.docker.com/r/mher/flower ###
        pull: true
        state: started
        restart_policy: "unless-stopped"
        ports:
          - "80:8080"
        command: flower --port=8080 --broker=amqp://172.17.0.1:5672/

    - name: Deploy RabbitMQ for Celery
      docker_container:
        name: "rabbitmq"
        image: ### Image: https://hub.docker.com/_/rabbitmq  Version: rabbitmq:3.7 ###
        pull: true
        state: started
        restart_policy: "unless-stopped"
        network_mode: host

    - name: Gracefully shut down previous Robot container
      docker_container:
        name: "robot"
        state: stopped
        stop_timeout: 3600
      ignore_errors: yes

    - name: Deploy latest Robot image for {{ env }} region
      docker_container:
        name: "robot"
        image: ### BASE IMAGE URL '/robot/{{ env }} e.g. github.com/robot {{ env }} ###
        state: started
        pull: true
        network_mode: host
        restart_policy: "unless-stopped"
        command: supervisord
        env:
          ROBOT_ENV: "{{ env }}"
        volumes:
          - "/home/administrator/celerybeat:/opt/robot/celerybeat"
