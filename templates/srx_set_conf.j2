{# Create VRF #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} instance-type virtual-router
{# Create a northbound route #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} routing-options static route 0.0.0.0/0 next-table PUBLIC.inet.0
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }}
{# Create southbound sub interface and gateway for each VLAN and attach them to the VRF #}
{% for vlan in vLANs %}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} interface ge-0/0/1.{{ vlan['vLAN'] }}
{# Configure sub-interfaces #}
set groups vrf-{{ idProject }} interfaces ge-0/0/1 unit {{ vlan['vLAN'] }} description vrf-{{ idProject }}-{{ vlan['vLAN'] }} vlan-id {{ vlan['vLAN'] }} family inet address {{ vlan['subnet'] }}
{# Create private zones #}
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }} interfaces ge-0/0/1.{{ vlan['vLAN'] }} host-inbound-traffic system-services ping
{% endfor %}
{# Source (outbound) NAT #}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound description vrf-{{ idProject }}-outbound-nat
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public routing-instance PUBLIC
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public address {{ outBoundIP }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound from zone vrf-{{ idProject }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound to zone PUBLIC
{% for vlan in vLANs %}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vLAN'] }}-outbound match source-address {{ vlan['subnet'] }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vLAN'] }}-outbound then source-nat pool vrf-{{ idProject }}-public
{% endfor %}
{# Create static ruleset inbound 1:1 NAT#}
{% for nat in NATs %}
{% set rule_name = nat['fIP'].split('/')[0].replace('.', '-') %}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} match destination-address {{ nat['fIP'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} then static-nat prefix {{ nat['pIP'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} then static-nat prefix routing-instance vrf-{{ idProject }}
{% endfor %}
{# Create proxy-arp on specific interface with predefined IP addresses #}
{% for nat in NATs %}
set groups vrf-{{ idProject }} security nat proxy-arp interface ge-0/0/0.0 address {{ nat['fIP'] }}
{% endfor %}
set apply-groups vrf-{{ idProject }}