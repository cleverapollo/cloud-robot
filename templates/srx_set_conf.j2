{# Create VRF #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} instance-type virtual-router

{# Create a northbound route #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} routing-options static route 0.0.0.0/0 next-table PUBLIC.inet.0
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }}

{# Create southbound sub interface and gateway for each VLAN and attach them to the VRF #}
{% for vlan in vLANs %}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} interface ge-0/0/1.{{ vlan['vLAN'] }}
{# Configure sub-interfaces #}
set groups vrf-{{ idProject }} interfaces ge-0/0/1 unit {{ vlan['vLAN'] }} description vrf-{{ idProject }}-{{ vlan['vLAN'] }} vlan-id {{ vlan['vLAN'] }} family inet address {{ vlan['subnet'] }}
{# Create private zones #}
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }} interfaces ge-0/0/1.{{ vlan['vLAN'] }} host-inbound-traffic system-services ping
{% endfor %}

{# Source (outbound) NAT #}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound description vrf-{{ idProject }}-outbound-nat
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public routing-instance PUBLIC
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public address {{ outBoundIP }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound from zone vrf-{{ idProject }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound to zone PUBLIC
{% for vlan in vLANs %}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vLAN'] }}-outbound match source-address {{ vlan['subnet'] }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vLAN'] }}-outbound then source-nat pool vrf-{{ idProject }}-public
{% endfor %}

{# Create static ruleset inbound 1:1 NAT#}
{% for nat in NATs %}
{% set rule_name = nat['pIP'].split('/')[0].replace('.', '-') %}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} match destination-address {{ nat['fIP'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} then static-nat prefix {{ nat['pIP'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ rule_name }} then static-nat prefix routing-instance vrf-{{ idProject }}
{# Create proxy-arp on specific interface with predefined IP addresses #}
set security nat proxy-arp interface ge-0/0/0.0 address {{ nat['fIP'] }}
{% endfor %}

{% for vpn in VPNs %}
{# proxy-arp for vrf is required only in case of VPN #}
set security nat proxy-arp interface ge-0/0/0.0 address {{ outBoundIP }}
{# add the appropriate interfaces to it #}
set groups vrf-{{ idProject }} interfaces st0 unit {{ vpn['vLAN'] }} family inet address {{ vpn['remoteSubnet'] }}
{# set up some VPN parameters #}
{# Phase 1 #}
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-{{ vpn['vLAN'] }}-ikepolicy mode main
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-{{ vpn['vLAN'] }}-ikepolicy proposals psk-dh2-aes
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-{{ vpn['vLAN'] }}-ikepolicy pre-shared-key ascii-text {{ vpn['preSharedKey'] }}
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-{{ vpn['vLAN'] }}-gw ike-policy vrf-{{ idProject }}-{{ vpn['vLAN'] }}-ikepolicy
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-{{ vpn['vLAN'] }}-gw address {{ vpn['ipRemoteAddress'] }}
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-{{ vpn['vLAN'] }}-gw external-interface ge-0/0/0
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-{{ vpn['vLAN'] }}-gw local-address {{ outBoundIP }}
{# Phase 2 #}
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-{{ vpn['vLAN'] }}-vpn bind-interface st0.{{ vpn['vLAN'] }}
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-{{ vpn['vLAN'] }}-vpn ike gateway vrf-{{ idProject }}-{{ vpn['vLAN'] }}-gw
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-{{ vpn['vLAN'] }}-vpn ike ipsec-policy dh2-pfs-esp-md5-aes
{# anchor the relevant interfaces in their own security zone #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} interface st0.{{ vpn['vLAN'] }}
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }} interfaces st0.{{ vpn['vLAN'] }}
{# add a route to the other end of the IPsec tunnel with the tunnel if as the nexthop #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} routing-options static route {{ vpn['local_subnet'] }} next-hop st0.{{ vpn['vLAN'] }}
{% endfor %}

set apply-groups vrf-{{ idProject }}