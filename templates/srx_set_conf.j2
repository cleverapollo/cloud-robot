{# Create VRF #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} instance-type virtual-router
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create a northbound route #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} routing-options static route 0.0.0.0/0 next-table PUBLIC.inet.0
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Define VRF public IP on ge-0/0/0.0 interface #}
set groups vrf-{{ idProject }} interfaces ge-0/0/0 unit 0 family inet address {{ vrf_ip }}/{{ mask_vpn }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create southbound sub interface and gateway for each VLAN and attach them to the VRF #}
{% for vlan in vlans %}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} interface ge-0/0/1.{{ vlan['vlan'] }}
{# Configure sub-interfaces #}
set groups vrf-{{ idProject }} interfaces ge-0/0/1 unit {{ vlan['vlan'] }} description vrf-{{ idProject }}-{{ vlan['vlan'] }} vlan-id {{ vlan['vlan'] }} family inet address {{ vlan['address_range'] }}
{# Create private zones #}
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }} interfaces ge-0/0/1.{{ vlan['vlan'] }} host-inbound-traffic system-services ping
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Source (outbound) NAT #}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound description vrf-{{ idProject }}-outbound-nat
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public routing-instance PUBLIC
set groups vrf-{{ idProject }} security nat source pool vrf-{{ idProject }}-public address {{ vrf_ip }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound from zone vrf-{{ idProject }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound to zone PUBLIC
{% for vlan in vlans %}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vlan'] }}-outbound match source-address {{ vlan['address_range'] }}
set groups vrf-{{ idProject }} security nat source rule-set vrf-{{ idProject }}-outbound rule {{ vlan['vlan'] }}-outbound then source-nat pool vrf-{{ idProject }}-public
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create static ruleset inbound 1:1 NAT#}
{% for nat in nats %}
{% set rule_ip_segment = nat['private'].split('/')[0].replace('.', '-') %}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} match destination-address {{ nat['public'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix {{ nat['private'] }}
set groups vrf-{{ idProject }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix routing-instance vrf-{{ idProject }}
{# Create proxy-arp on specific interface with predefined IP addresses #}
set groups vrf-{{ idProject }} security nat proxy-arp interface ge-0/0/0.0 address {{ nat['public'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{% for vpn in vpns %}
{# add the appropriate interfaces to it #}
set groups vrf-{{ idProject }} interfaces st0 unit {{ vpn['vlan'] }} family inet
{# set up some VPN parameters #}
{# Phase 1 #}
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ikepolicy mode main
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ikepolicy proposals psk-dh2-aes
set groups vrf-{{ idProject }} security ike policy vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ikepolicy pre-shared-key ascii-text {{ vpn['preSharedKey'] }}
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw ike-policy vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ikepolicy
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw address {{ vpn['ipRemoteAddress'] }}
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw external-interface ge-0/0/0.0
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw local-address {{ vrf_ip }}
set groups vrf-{{ idProject }} security ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw version v1-only
{# Phase 2 #}
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ipsec bind-interface st0.{{ vpn['vlan'] }}
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ipsec ike gateway vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-gw
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ipsec ike ipsec-policy dh2-pfs-esp-md5-aes
set groups vrf-{{ idProject }} security ipsec vpn vrf-{{ idProject }}-vpn-{{ vpn['vlan'] }}-ipsec establish-tunnels immediately
{# anchor the relevant interfaces in their own routing instance and security zone #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} interface st0.{{ vpn['vlan'] }}
set groups vrf-{{ idProject }} security zones security-zone vrf-{{ idProject }} interfaces st0.{{ vpn['vlan'] }}
{# add a route to the other end of the IPSec tunnel with the tunnel if as the nexthop #}
set groups vrf-{{ idProject }} routing-instances vrf-{{ idProject }} routing-options static route {{ vpn['remote_subnet_cidr'] }} next-hop st0.{{ vpn['vlan'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
set apply-groups vrf-{{ idProject }}
