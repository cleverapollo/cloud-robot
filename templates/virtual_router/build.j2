{# Create VRF #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} instance-type virtual-router
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }}
set groups vrf-{{ project_id }} security address-book vrf-{{ project_id }}-address-book attach zone vrf-{{ project_id }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create a northbound route #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} routing-options static route 0.0.0.0/0 next-table inet.0
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Define VRF public IP on PUBLIC interface #}
set groups vrf-{{ project_id }} interfaces {{ public_interface }} unit 0 family inet address {{ virtual_router_ip }}/{{ virtual_router_subnet_mask }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create southbound sub interface and gateway for each VLAN and attach them to the VRF #}
{% for vlan in vlans %}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} interface {{ private_interface }}.{{ vlan['vlan'] }}
{# Configure sub-interfaces #}
set groups vrf-{{ project_id }} interfaces {{ private_interface }} unit {{ vlan['vlan'] }} description vrf-{{ project_id }}-vlan-{{ vlan['vlan'] }} vlan-id {{ vlan['vlan'] }} family {{ vlan['address_family'] }} address {{ vlan['address_range'] }}
{# Create private zones #}
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }} host-inbound-traffic system-services ping
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }} interfaces {{ private_interface }}.{{ vlan['vlan'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Source (outbound) NAT #}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound description vrf-{{ project_id }}-outbound-nat
set groups vrf-{{ project_id }} security nat source pool vrf-{{ project_id }}-public address {{ virtual_router_ip }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound from zone vrf-{{ project_id }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound to zone PUBLIC
{% for vlan in vlans %}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule {{ vlan['vlan'] }}-outbound match source-address {{ vlan['address_range'] }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule {{ vlan['vlan'] }}-outbound then source-nat pool vrf-{{ project_id }}-public
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create static ruleset inbound 1:1 NAT#}
{% for nat in nats %}
{% set rule_ip_segment = nat['private_address'].split('/')[0].replace('.', '-') %}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} match destination-address {{ nat['public_address'] }}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix {{ nat['private_address'] }}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix routing-instance vrf-{{ project_id }}
{# Create proxy-arp on specific interface with predefined IP addresses #}
set groups vrf-{{ project_id }} security nat proxy-arp interface {{ public_interface }}.0 address {{ nat['public_address'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{% for vpn in vpns %}
{# Define vpn secure tunnel interface(st0) to vpn #}
set groups vrf-{{ project_id }} interfaces st0 unit {{ vpn['stif_number'] }} family inet
{# anchor the st0 interface in routing instance and security zone #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} interface st0.{{ vpn['stif_number'] }}
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }} interfaces st0.{{ vpn['stif_number'] }}
{# -------------------------- #}
{# Juniper Secure Connect #}
{% if vpn['vpn_type'] == 'dynamic_secure_connect' %}
{# Access Profiles and Address assignments and adding to source nat #}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule SC-RA-outbound match source-address {{ vpn['routes'][0]['remote_subnet'] }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule SC-RA-outbound then source-nat pool vrf-{{ project_id }}-public
set groups vrf-{{ project_id }} security tcp-encap profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-SSL-VPNProfile ssl-profile SC-ssl-term-profile
{# Note SC-ssl-term-profile is a Global profile defined on Router already #}
set groups vrf-{{ project_id }} access address-assignment pool vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AddPool family inet network {{ vpn['routes'][0]['remote_subnet'] }}
set groups vrf-{{ project_id }} access address-assignment pool vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AddPool family inet xauth-attributes primary-dns {{ vpn['dns'] }}
set groups vrf-{{ project_id }} security remote-access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-vpn ipsec-vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-vpn
set groups vrf-{{ project_id }} security remote-access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-vpn access-profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro
set groups vrf-{{ project_id }} security remote-access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-vpn client-config vrf-{{ project_id }}-{{ vpn['stif_number'] }}-CC
set groups vrf-{{ project_id }} security remote-access client-config vrf-{{ project_id }}-{{ vpn['stif_number'] }}-CC connection-mode manual
set groups vrf-{{ project_id }} security remote-access client-config vrf-{{ project_id }}-{{ vpn['stif_number'] }}-CC dead-peer-detection interval 60
set groups vrf-{{ project_id }} security remote-access client-config vrf-{{ project_id }}-{{ vpn['stif_number'] }}-CC dead-peer-detection threshold 5
set groups vrf-{{ project_id }} access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro address-assignment pool vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AddPool
set groups vrf-{{ project_id }} access firewall-authentication web-authentication default-profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro
{# Phase1 of Juniper Secure Connect #}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway dynamic user-at-hostname "vrf-{{ project_id }}-{{vpn['stif_number'] }}@cloudcix.com"
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway dynamic ike-user-type shared-ike-id
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway dead-peer-detection optimized
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway dead-peer-detection interval 10
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway dead-peer-detection threshold 5
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway aaa access-profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway tcp-encap-profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-SSL-VPNProfile
{# Phase2 of Juniper Secure Connect #}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn df-bit clear
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn copy-outer-dscp
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn traffic-selector ts1 local-ip 0.0.0.0/0
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn traffic-selector ts1 remote-ip 0.0.0.0/0
{# Remote access clients #}
{% for client in vpn['vpn_clients'] %}
set groups vrf-{{ project_id }} access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro client {{ client['username'] }} client-group vrf-{{ project_id }}-{{ vpn['stif_number'] }}
set groups vrf-{{ project_id }} access profile vrf-{{ project_id }}-{{ vpn['stif_number'] }}-AccPro client {{ client['username'] }} firewall-user password "{{ client['password'] }}"
{% endfor %}
{# -------------------------- #}
{# Site to Site           #}
{% elif vpn['vpn_type'] == 'site_to_site' %}
{# Phase1 and Phase2 of Site to Site #}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway address {{ vpn['ike_public_ip'] }}
set groups vrf-{{ project_id }} security ipsec proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-proposal authentication-algorithm {{ vpn['ipsec_authentication'] }}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn establish-tunnels {{ vpn['ipsec_establish_time'] }}
{# Routes, Traffic selectors/Proxy identifier #}
{% for route in vpn['routes'] %}
{% if vpn['traffic_selector'] %}
{# Add traffic selector combinations #}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn traffic-selector ts{{ loop.index }} local-ip {{ route['local'] }}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn traffic-selector ts{{ loop.index }} remote-ip {{ route['remote'] }}
{% else %}
{# add a route to the IPSec tunnel with the tunnel interface as the next hop #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} routing-options static route {{ route['remote'] }} next-hop st0.{{ vpn['stif_number'] }}
{% endif %}
{% endfor %}
{% endif %}
{# --------------------------------------#}
{# Common Phase1 config #}
set groups vrf-{{ project_id }} security ike proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal authentication-method pre-shared-keys
set groups vrf-{{ project_id }} security ike proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal dh-group {{ vpn['ike_dh_groups'] }}
set groups vrf-{{ project_id }} security ike proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal authentication-algorithm {{ vpn['ike_authentication'] }}
set groups vrf-{{ project_id }} security ike proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal encryption-algorithm {{ vpn['ike_encryption'] }}
set groups vrf-{{ project_id }} security ike proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal lifetime-seconds {{ vpn['ike_lifetime'] }}
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-policy mode {{ vpn['ike_mode'] }}
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-policy proposals vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-proposal
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-policy pre-shared-key ascii-text {{ vpn['ike_pre_shared_key'] }}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway ike-policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ike-policy
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway external-interface {{ public_interface }}.0
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway local-address {{ virtual_router_ip }}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway version {{ vpn['ike_version'] }}
{# --------------------------------------#}
{# Common Phase 2 authentication and encryption #}
set groups vrf-{{ project_id }} security ipsec proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-proposal protocol esp
set groups vrf-{{ project_id }} security ipsec proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-proposal encryption-algorithm {{ vpn['ipsec_encryption'] }}
set groups vrf-{{ project_id }} security ipsec proposal vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-proposal lifetime-seconds {{ vpn['ipsec_lifetime'] }}
set groups vrf-{{ project_id }} security ipsec policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-policy proposals vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-proposal
set groups vrf-{{ project_id }} security ipsec policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-policy perfect-forward-secrecy keys {{ vpn['ipsec_pfs_groups'] }}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn ike gateway vrf-{{ project_id }}-{{ vpn['stif_number'] }}-gateway
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn ike ipsec-policy vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-policy
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-{{ vpn['stif_number'] }}-ipsec-vpn bind-interface st0.{{ vpn['stif_number'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Firewall rules #}
{# intra-zone #}
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone vrf-{{ project_id }} policy vrf-{{ project_id }}-policy-intra-zone match source-address any
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone vrf-{{ project_id }} policy vrf-{{ project_id }}-policy-intra-zone match destination-address any
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone vrf-{{ project_id }} policy vrf-{{ project_id }}-policy-intra-zone match application any
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone vrf-{{ project_id }} policy vrf-{{ project_id }}-policy-intra-zone then permit
{# ---------- #}
{# inter-zone #}
{% for firewall in firewall_rules %}
{# check to create an address object or not and then write policy #}
{% if firewall['source'] != '0.0.0.0/0' %}
{# address-book goes into vrf-xx group but policy goes into vrf-xx-sp-inbound group #}
set groups vrf-{{ project_id }} security address-book {{ firewall['source_address_book'] }} address vrf-{{ project_id }}-{{ firewall['source_address_name'] }} {{ firewall['source'] }}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match source-address vrf-{{ project_id }}-{{ firewall['source_address_name'] }}
{% else %}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match source-address any
{% endif %}
{% if firewall['destination'] != '0.0.0.0/0' %}
set groups vrf-{{ project_id }} security address-book {{ firewall['destination_address_book'] }} address vrf-{{ project_id }}-{{ firewall['destination_address_name'] }} {{ firewall['destination'] }}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match destination-address vrf-{{ project_id }}-{{ firewall['destination_address_name'] }}
{% else %}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match destination-address any
{% endif %}
{# application creation if required #}
{% if firewall['protocol'] == 'any' %}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match application any
{% elif firewall['protocol'] == 'icmp' %}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match application [junos-icmp-all junos-icmp6-all]
{% else %}
set applications application cloudcix-{{ firewall['protocol'] }}-{{ firewall['port'] }} protocol {{ firewall['protocol'] }} destination-port {{ firewall['port'] }}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} match application cloudcix-{{ firewall['protocol'] }}-{{ firewall['port'] }}
{% endif %}
{# permissions #}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} then {{ firewall['permission'] }}
{# logging sessions #}
{% if firewall['log'] %}
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} then log session-init
set groups vrf-{{ project_id }}-sp-{{ firewall['scope'] }} security policies from-zone {{ firewall['from_zone'] }} to-zone {{ firewall['to_zone'] }} policy vrf-{{ project_id }}-policy-{{ firewall['scope'] }}-{{ firewall['order'] }} then log session-close
{% endif %}
{% endfor %}
{# ------------------------------------------------------------------ #}
{# inter-zone outbound for now allow all, will remove this eventually #}
{% set outbound_firewall = True %}
set groups vrf-{{ project_id }}-sp-outbound security policies from-zone vrf-{{ project_id }} to-zone PUBLIC policy vrf-{{ project_id }}-policy-outbound-permit-all match source-address any
set groups vrf-{{ project_id }}-sp-outbound security policies from-zone vrf-{{ project_id }} to-zone PUBLIC policy vrf-{{ project_id }}-policy-outbound-permit-all match destination-address any
set groups vrf-{{ project_id }}-sp-outbound security policies from-zone vrf-{{ project_id }} to-zone PUBLIC policy vrf-{{ project_id }}-policy-outbound-permit-all match application any
set groups vrf-{{ project_id }}-sp-outbound security policies from-zone vrf-{{ project_id }} to-zone PUBLIC policy vrf-{{ project_id }}-policy-outbound-permit-all then permit
{# ----------------------------------------------------------------------------------------------------------------- #}
{# importing robosoc  and vrf-{project_id}-sp-{firewall['scope']} security policies into actual vrf-{project_id} security policy #}
set groups vrf-{{ project_id }} security policies from-zone PUBLIC to-zone vrf-{{ project_id }} apply-groups PUBLIC-VRF
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone PUBLIC apply-groups VRF-PUBLIC
{% if inbound_firewall %}
set groups vrf-{{ project_id }} security policies from-zone PUBLIC to-zone vrf-{{ project_id }} apply-groups vrf-{{ project_id }}-sp-inbound
{% endif %}
{% if outbound_firewall %}
set groups vrf-{{ project_id }} security policies from-zone vrf-{{ project_id }} to-zone PUBLIC apply-groups vrf-{{ project_id }}-sp-outbound
{% endif %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
set apply-groups vrf-{{ project_id }}
