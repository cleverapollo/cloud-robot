# Kickstart file for VM #{{ vm_identifier }}

{# Install OS instead of upgrade #}
install

{# Installation media #}
cdrom

{# System Language #}
lang {{ language }}.UTF-8

{# System Keyboard #}
keyboard {{ keyboard }}

{# Firewall configuration #}
firewall --disabled

{# Run the setup agent on the first boot #}
firstboot --disabled

{# System Timezone #}
timezone --utc {{ timezone }}

{# Use text mode install #}
text

{# System Authorization Information #}
auth --enableshadow --passalgo=sha512

{# Clear the MBR #}
zerombr

{# Partition Clearing Information #}
clearpart --all --initlabel

{# Installation log level #}
logging --level=info

{# Network Information #}
network --bootproto=static --device={{ device_type }}{{ device_index }} --ip={{ first_nic_primary['ip'] }} --netmask={{ first_nic_primary['netmask'] }} --gateway={{ first_nic_primary['gateway'] }} --nameserver={{ dns }} --activate
{% for nic in nics %}
network --bootproto=static --device={{ device_type }}{{ device_index + loop.index }} --ip={% for address in nic %}{% if forloop.first %}{{ address['ip'] }}{% endif %}{% endfor %} --netmask={{ nic['netmask'] }} --gateway={{ nic['gateway'] }} --nameserver={{ dns }} --activate
{% endfor %}

{# System Bootloader information #}
bootloader --location=mbr

{# Disk Partioning #}
autopart --type=lvm

{# Root password #}
rootpw --iscrypted {{ crypted_root_password }}

{# Username / Password #}
user --name "administrator" --password={{ crypted_admin_password }} --groups=wheel --iscrypted

{# SELinux configuration #}
selinux --disabled

{# Do not configure the X Window System #}
skipx

{# Reboot after installation #}
reboot --eject

{# Install packages #}
%packages
@core
%end

{# Post Install #}
%post --log=/root/install-post.log (

{% if first_nic_secondary %}
{% for address in first_nic_secondary['ips'] %}
    echo -e "IPADDR{{ loop.index + 1 }}={{ address }}\nPREFIX{{ loop.index + 1 }}={{ first_nic_secondary['netmask_int'] }}" >> /etc/sysconfig/network-scripts/ifcfg-{{ device_type }}{{ device_index }}
{% endfor %}
{% endif%}

{% for nic in nics %}
{% set nic_count = device_index + loop.index %}
{% for address in nic['ips'] %}
{% if not forloop.first %}
    echo -e "IPADDR{{ loop.index0 + 1 }}={{ address }}\nPREFIX{{ loop.index0 + 1 }}={{ nic['netmask_int'] }}" >> /etc/sysconfig/network-scripts/ifcfg-{{ device_type }}{{ nic_count }}
{% endif %}
{% endfor %}
{% endfor %}
%end

