function VMBuilder {
  [cmdletbinding()]
  Param(
    [string]$drive_letter
  )
  try {
    $file_path = "$drive_letter\HyperV\"
    if($(Test-Path -Path $file_path) -eq $True){
{# Define Ram #}
    $ram = [int64]{{ ram }}*1MB
{# Define primary drive #}
    {% if hdd %}
      $drive_size = [int64]{{ hdd }}*1GB
    {% elif ssd %}
      $drive_size = [int64]{{ ssd }}*1GB
    {% endif %}
{# Path Configuration #}
{# VM Path #}
    {% set vm_path = "D:\HyperV\\" %}
    New-Item -ItemType directory -Path {{ vm_path }}{{ vm_identifier }}
{# VHDX Path #}{% set vhd_path = [[[[vm_path, vm_identifier]|join(), vm_identifier]|join("\\"), drive_format, drive_id]|join("_"), ".vhdx"]|join() %}
{# IMAGE VHDX Path #}
    [ValidateScript({Test-Path $_ })]
    [string]$VHDXPath = "$drive_letter\HyperV\VHDXs\{{ image_name }} Gen 2.vhdx"
{# Unattend XML file path #}
    [ValidateScript({Test-Path $_ })]
    $unattend = "$drive_letter\VMs\{{ vm_identifier }}\unattend.xml"
    $network = "$drive_letter\VMs\{{ vm_identifier }}\network.xml"
{# Copying VHDX to the folder #}
    Copy-Item $VHDXPath -Destination {{ vhd_path }}
{# Resizing the drive  #}
    Resize-VHD -Path {{ vhd_path }} -SizeBytes $drive_size
{# Mounting the drive #}
    $mountedVHD = Mount-VHD -Path {{ vhd_path }} -NoDriveLetter -Passthru
    Set-Disk -Number $mountedVHD.Number -IsOffline $false
    $partitions = Get-Partition -DiskNumber $mountedVHD.Number
    $mount_path = "D:\HyperV\{{ vm_identifier }}\mount"
    mkdir $mount_path
    Add-PartitionAccessPath -InputObject $partitions[0] -AccessPath $mount_path
{# Copying unattend and network xml files into mounded drive #}
    Copy-Item $unattend "$mount_path\unattend.xml"
    Copy-Item $network "$mount_path\network.xml"
{# Removing mounted PSdrive to free up #}
    Remove-PSDrive $mount_point
{# Expanding the VHDx drive to its requested size #}
    $size = Get-PartitionSupportedSize -DiskNumber $mountedVHD.Number
    Resize-Partition -DiskNumber $mountedVHD.Number -PartitionNumber $partitions[0].PartitionNumber -Size $size.SizeMax
    Remove-Item -Path $mount_path -Recurse -Force
    Dismount-VHD -Path {{ vhd_path }}
{# VM Creation and Configuration #}
{# Creation of VM #}
    New-VM -Name {{ vm_identifier }} -Path {{ vm_path }} `
    -Generation 2 `
    -SwitchName "Virtual Switch" `
    -VHDPath {{ vhd_path }}
{# Changing the number of processor and the memory #}
    Set-VMProcessor {{ vm_identifier }} -Count {{ cpu }}
{# Setting the RAM #}
    Set-VMMemory {{ vm_identifier }} -DynamicMemoryEnabled $false -StartupBytes $ram
{# Setting Network Adapter #}
    Set-VMNetworkAdapter -VMName {{ vm_identifier }} -DeviceNaming On
    Rename-VMNetworkAdapter -VMName {{ vm_identifier }} -NewName "vNIC-0"
    Set-VMNetworkAdapterVlan -VMName {{ vm_identifier }} -VMNetworkAdapterName "vNIC-0" -Access -VlanId {{ vlan }}
    {% for ip in ip_addresses %}
      Add-VMNetworkAdapter -VMName {{ vm_identifier }} -Name "vNIC-{{ loop.index }}" -SwitchName "Virtual Switch" -DeviceNaming On
      Set-VMNetworkAdapterVlan -VMName {{ vm_identifier }} -VMNetworkAdapterName "vNIC-{{ loop.index }}" -Access -VlanId {{ ip['vlan'] }}
    {% endfor %}
{# Adding Additional Drives #}
    {% if drives %}
      {% for drive in drives %}
        $driveSize = [int64]{{ drive["drive_size"] }}*1GB
        {% set drive_path = [[[[vm_path, vm_identifier]|join(), vm_identifier]|join("\\"), drive_format, drive["drive_id"]]|join("_"), ".vhdx"]|join() %}
{# Create new drive #}
        New-VHD -Path {{ drive_path }} -SizeBytes $driveSize -Dynamic
{# Attach the VHD(x) to the Vm #}
        Add-VMHardDiskDrive -VMName {{ vm_identifier }} -Path {{ drive_path }}
      {% endfor %}
    {% endif %}
{# Start the VM #}
    Start-VM -Name {{ vm_identifier }}
    Wait-VM -Name {{ vm_identifier }} -For IPAddress
    Write-Host "VM Successfully Created and Hosted"
    }
  else {
    Write-Error "$_.Exception.Message"
  }
  }
  catch {
    if($(Test-Path -Path D:\HyperV\{{ vm_identifier }}\mount\Windows)){
      Dismount-VHD -Path {{ vhd_path }}}
    if($(Test-Path -Path D:\HyperV\{{ vm_identifier }}) -eq $True){
      Remove-Item -Path D:\HyperV\{{ vm_identifier }} -Recurse}
    if($(Test-Path -Path $drive_letter) -eq $True){Remove-PSDrive $mount_point}
      Write-Error "$_.Exception.Message "
  }
}