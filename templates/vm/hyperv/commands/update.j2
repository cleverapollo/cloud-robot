try {
  $ErrorActionPreference = "Stop"
  $VMName = "{{ vm_identifier }}"
{# 0. Update the IPAddress if any #}
  $MVSMS = Get-WmiObject -Namespace root\virtualization\v2 -Class Msvm_VirtualSystemManagementService
  $MCS = Get-WmiObject -Namespace root\virtualization\v2 -Class Msvm_ComputerSystem `
  -Filter "ElementName='$VMName'"
  $MVSSD = ($MCS.GetRelated("Msvm_VirtualSystemSettingData", "Msvm_SettingsDefineState", `
  $null, $null, "SettingData", "ManagedElement", $false, $null) | % {$_})
  $MSEPSD = $MVSSD.GetRelated("Msvm_SyntheticEthernetPortSettingData")
  $MGNAC = ($MSEPSD.GetRelated("Msvm_GuestNetworkAdapterConfiguration", "Msvm_SettingDataComponent", `
  $null, $null, "PartComponent", "GroupComponent", $false, $null) | % {$_})
  $MGNAC.DHCPEnabled = $false
  $MGNAC.IPAddresses = @("{{ ip_address }}")
  $MGNAC.Subnets = @("{{ netmask }}")
  $MGNAC.DefaultGateways = @("{{ gateway }}")
  $MGNAC.DNSServers = @("{{ dns }}")
  $MVSMS.SetGuestNetworkAdapterConfiguration($MCS.Path, $MGNAC.GetText(1))
{# 1. Shutdown the VM first #}
  Stop-VM -Name $VMName
{# 2. Updates the processor/cpu count and Ram sizes even if changed or not #}
{% if changes['cpu'] %}
  Set-VMProcessor $VMName -Count {{ changes['cpu'] }}
{% endif %}
{% if changes['ram'] %}
  Set-VMMemory $VMName -DynamicMemoryEnabled $false -StartupBytes {{ changes['ram'] }}MB
{% endif %}
{# 3. Set the vLan #}
  Set-VMNetworkAdapterVlan -VMName {{ vm_identifier }} -Access -VlanId {{ vlan }}
{# 4. Update Drive Sizes #}
{% if changes['storages'] %}
{% set hdd = changes['storages']['hdd'] %}
{% set ssd = changes['storages']['ssd'] %}
{% set drives = changes['storages']['drives'] %}
{# 4a. Primary Drive #}
{# considering new_size > old_size always #}
{% if hdd and int(hdd.split(":")[1]) > int(hdd.split(":")[2]) %}
{% set drive_path = [[[["D:\HyperV\\", vm_identifier]|join(), vm_identifier]|join("\\"), "HDD", hdd.split(":")[0]]|join("_"), ".vhdx"]|join() %}
  Resize-VHD -Path {{ drive_path }} -SizeBytes {{ int(hdd.split(":")[1]) }}GB
  $mountedVHD = Mount-VHD -Path {{ drive_path }} -NoDriveLetter -Passthru
  Set-Disk -Number $mountedVHD.Number -IsOffline $false
  $partitions = Get-Partition -DiskNumber $mountedVHD.Number
  $size = Get-PartitionSupportedSize -DiskNumber $mountedVHD.Number
  Resize-Partition -DiskNumber $mountedVHD.Number -PartitionNumber $partitions[-1].PartitionNumber -Size $size.SizeMax
  Dismount-VHD -Path {{ drive_path }}
{% elif ssd and int(ssd.split(":")[1]) > int(ssd.split(":")[2]) %}
{% set drive_path = [[[["D:\HyperV\\", vm_identifier]|join(), vm_identifier]|join("\\"), "SSD", ssd.split(":")[0]]|join("_"), ".vhdx"]|join() %}
  Resize-VHD -Path {{ drive_path }} -SizeBytes {{ int(ssd.split(":")[1]) }}GB
  $mountedVHD = Mount-VHD -Path {{ drive_path }} -NoDriveLetter -Passthru
  Set-Disk -Number $mountedVHD.Number -IsOffline $false
  $partitions = Get-Partition -DiskNumber $mountedVHD.Number
  $size = Get-PartitionSupportedSize -DiskNumber $mountedVHD.Number
  Resize-Partition -DiskNumber $mountedVHD.Number -PartitionNumber $partitions[-1].PartitionNumber -Size $size.SizeMax
  Dismount-VHD -Path {{ drive_path }}
{% endif %}
{# 4b. Extra Drives #}
{% for drive in drives %}
{% if int(drive["new_size"]) > int(drive["old_size"]) %}
  $vhdxPath = D:\HyperV\$VMName\$VMName_{{ drive["type"] }}_{{ drive["id"] }}.vhdx
  Resize-VHD -Path $vhdxPath -SizeBytes {{ drive["new_size"] }}GB
  $mountedVHD = Mount-VHD -Path $vhdxPath -NoDriveLetter -Passthru
  Set-Disk -Number $mountedVHD.Number -IsOffline $false
  $partitions = Get-Partition -DiskNumber $mountedVHD.Number
  $size = Get-PartitionSupportedSize -DiskNumber $mountedVHD.Number
  Resize-Partition -DiskNumber $mountedVHD.Number -PartitionNumber $partitions[-1].PartitionNumber -Size $size.SizeMax
  Dismount-VHD -Path $vhdxPath
{% elif int(drive["new_size"]) == 0 %}
  Remove-Item -Recurse D:\HyperV\$VMName\$VMName_{{ drive["type"] }}_{{ drive["id"] }}.vhdx
{% elif drive["old_size"] is in [0, None, ""] %}
  New-VHD -Path D:\HyperV\$VMName\$VMName_{{ drive["type"] }}_{{ drive["id"] }}.vhdx -SizeBytes {{ drive["new_size"] }}GB -Dynamic
  Add-VMHardDiskDrive -VMName $VMName -Path D:\HyperV\$VMName\$VMName_{{ drive["type"] }}_{{ drive["id"] }}.vhdx
{% endif %}
{% endfor %}
{% endif %}
  Write-Host "VM Successfully Updated."
}catch {Write-Error "VM failed to update. Error Message: $_.Exception.Message"}