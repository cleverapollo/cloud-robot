{# Create VRF #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} instance-type virtual-router
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create a northbound route #}
{% if has_firewall %}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} routing-options static route 0.0.0.0/0 next-table PUBLIC_FW.inet.0
{% else %}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} routing-options static route 0.0.0.0/0 next-table PUBLIC.inet.0
{% endif %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Define VRF public IP on ge-0/0/0.0 interface #}
set groups vrf-{{ project_id }} interfaces {{ public_port }} unit 0 family {{ type'] }} address {{ vrf_ip }}/{{ vrf_subnet_mask }}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create southbound sub interface and gateway for each VLAN and attach them to the VRF #}
{% for vlan in vlans %}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} interface {{ private_port }}.{{ vlan['vlan'] }}
{# Configure sub-interfaces #}
set groups vrf-{{ project_id }} interfaces {{ private_port }} unit {{ vlan['vlan'] }} description vrf-{{ project_id }}-{{ vlan['vlan'] }} vlan-id {{ vlan['vlan'] }} family {{ vlan['address_family'] }} address {{ vlan['address_range'] }}
{# Create private zones #}
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }} interfaces {{ private_port }}.{{ vlan['vlan'] }} host-inbound-traffic system-services ping
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Source (outbound) NAT #}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound description vrf-{{ project_id }}-outbound-nat
{% if has_firewall %}
set groups vrf-{{ project_id }} security nat source pool vrf-{{ project_id }}-public routing-instance PUBLIC_FW
{% else %}
set groups vrf-{{ project_id }} security nat source pool vrf-{{ project_id }}-public routing-instance PUBLIC
{% endif %}
set groups vrf-{{ project_id }} security nat source pool vrf-{{ project_id }}-public address {{ vrf_ip }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound from zone vrf-{{ project_id }}
{% if has_firewall %}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound to zone PUBLIC_FW
{% else %}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound to zone PUBLIC
{% endif %}
{% for vlan in vlans %}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule {{ vlan['vlan'] }}-outbound match source-address {{ vlan['address_range'] }}
set groups vrf-{{ project_id }} security nat source rule-set vrf-{{ project_id }}-outbound rule {{ vlan['vlan'] }}-outbound then source-nat pool vrf-{{ project_id }}-public
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{# Create static ruleset inbound 1:1 NAT#}
{% for nat in nats %}
{% set rule_ip_segment = nat['private_address'].split('/')[0].replace('.', '-') %}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} match destination-address {{ nat['public_address'] }}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix {{ nat['private_address'] }}
set groups vrf-{{ project_id }} security nat static rule-set all-inbound-static-nat rule {{ vxlan }}-{{ nat['vlan'] }}-{{ rule_ip_segment }} then static-nat prefix routing-instance vrf-{{ project_id }}
{# Create proxy-arp on specific interface with predefined IP addresses #}
set groups vrf-{{ project_id }} security nat proxy-arp interface {{ public_port }}.0 address {{ nat['public_address'] }}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
{% for vpn in vpns %}
{# for site to site #}
{% if vpn['site_to_site'] %}
{# add the appropriate interfaces to it #}
set groups vrf-{{ project_id }} interfaces st0 unit {{ vpn['vlan'] }} family inet
{# set up some VPN parameters #}
{# Phase 1 #}
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ike-policy mode main
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ike-policy proposal-set {{ vpn['ike'] }}
set groups vrf-{{ project_id }} security ike policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ike-policy pre-shared-key ascii-text {{ vpn['pre_shared_key'] }}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw ike-policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ike-policy
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw address {{ vpn['remote_ip_address'] }}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw external-interface {{ public_port }}.0
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw local-address {{ vrf_ip }}
set groups vrf-{{ project_id }} security ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw version v1-only
{# Phase 2 authentication and encryption #}
set groups vrf-{{ project_id }} security ipsec policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-policy proposal-set {{ vpn['ipsec'] }}
set groups vrf-{{ project_id }} security ipsec policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-policy perfect-forward-secrecy keys group2
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-vpn ike gateway vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-gw
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-vpn ike ipsec-policy vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-policy
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-vpn bind-interface st0.{{ vpn['vlan'] }}
set groups vrf-{{ project_id }} security ipsec vpn vrf-{{ project_id }}-vpn-{{ vpn['vlan'] }}-ipsec-vpn establish-tunnels immediately
{# anchor the relevant interfaces in their own routing instance and security zone #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} interface st0.{{ vpn['vlan'] }}
set groups vrf-{{ project_id }} security zones security-zone vrf-{{ project_id }} interfaces st0.{{ vpn['vlan'] }}
{# add a route to the other end of the IPSec tunnel with the tunnel if as the nexthop #}
set groups vrf-{{ project_id }} routing-instances vrf-{{ project_id }} routing-options static route {{ vpn['remote_subnet'] }} next-hop st0.{{ vpn['vlan'] }}
{# for Remote Access #}
{% else %}
{# TODO #}
{% endif %}
{% endfor %}
{# --------------------------------------------------------------------------------------------------------------------------------- #}
set apply-groups vrf-{{ project_id }}
